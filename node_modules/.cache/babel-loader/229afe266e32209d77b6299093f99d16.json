{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport history from '../history/history';\nimport { getCurrenceRecipesFoodsFirstLetter, getCurrenceRecipesFoodsIngredients, getCurrenceRecipesFoodsName } from '../services/foodAPI';\nimport { getCurrenceRecipesDrinksFirstLetter, getCurrenceRecipesDrinksIngredients, getCurrenceRecipesDrinksName } from '../services/drinkAPI';\nconst {\n  filterSearch,\n  setRecipesFilters,\n  searchInput,\n  getSearchBtn\n} = useContext(RecipesContext);\n\nconst showAlert = () => {\n  alert('Sua busca deve conter somente 1 (um) caracter');\n};\n\nconst requestApi = () => {\n  if (history.location.pathname === '/bebidas') {\n    if (filterSearch === 'ingredients-input') {\n      getCurrenceRecipesDrinksIngredients(searchInput).then(response => setRecipesFilters(response.drinks));\n    } else if (filterSearch === 'name-input') {\n      getCurrenceRecipesDrinksName(searchInput).then(response => setRecipesFilters(response.drinks));\n    } else if (filterSearch === 'first-letter-input') {\n      if (searchInput.length > 1) {\n        showAlert();\n      } else {\n        getCurrenceRecipesDrinksFirstLetter(searchInput).then(response => setRecipesFilters(response.drinks));\n      }\n    }\n  } else if (filterSearch === 'ingredients-input') {\n    getCurrenceRecipesFoodsIngredients(searchInput).then(response => setRecipesFilters(response.meals));\n  } else if (filterSearch === 'name-input') {\n    getCurrenceRecipesFoodsName(searchInput).then(response => setRecipesFilters(response.meals));\n  } else if (filterSearch === 'first-letter-input') {\n    if (searchInput.length > 1) {\n      showAlert();\n    } else {\n      getCurrenceRecipesFoodsFirstLetter(searchInput).then(response => setRecipesFilters(response.meals));\n    }\n  }\n};\n\nconst useRequestApi = () => {\n  useEffect(requestApi, [getSearchBtn]);\n};\n\nexport default useRequestApi;","map":{"version":3,"sources":["/home/guilherme/Trybe/Projetos-trybe/sd-07-project-recipes-app/src/hooks/useApi.js"],"names":["useEffect","useContext","history","getCurrenceRecipesFoodsFirstLetter","getCurrenceRecipesFoodsIngredients","getCurrenceRecipesFoodsName","getCurrenceRecipesDrinksFirstLetter","getCurrenceRecipesDrinksIngredients","getCurrenceRecipesDrinksName","filterSearch","setRecipesFilters","searchInput","getSearchBtn","RecipesContext","showAlert","alert","requestApi","location","pathname","then","response","drinks","length","meals","useRequestApi"],"mappings":"AAAA,SAAQA,SAAR,EAAoBC,UAApB,QAAqC,OAArC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SACEC,kCADF,EAEEC,kCAFF,EAGEC,2BAHF,QAIO,qBAJP;AAKA,SACEC,mCADF,EAEEC,mCAFF,EAGEC,4BAHF,QAIO,sBAJP;AAMA,MAAM;AAAGC,EAAAA,YAAH;AAAkBC,EAAAA,iBAAlB;AAAqCC,EAAAA,WAArC;AAAmDC,EAAAA;AAAnD,IAAoEX,UAAU,CAACY,cAAD,CAApF;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpBC,EAAAA,KAAK,CAAC,+CAAD,CAAL;AACD,CAFH;;AAIA,MAAMC,UAAU,GAAG,MAAM;AACrB,MAAId,OAAO,CAACe,QAAR,CAAiBC,QAAjB,KAA8B,UAAlC,EAA8C;AAC5C,QAAIT,YAAY,KAAK,mBAArB,EAA0C;AACxCF,MAAAA,mCAAmC,CAACI,WAAD,CAAnC,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACC,MAAV,CADvC;AAED,KAHD,MAGO,IAAIZ,YAAY,KAAK,YAArB,EAAmC;AACxCD,MAAAA,4BAA4B,CAACG,WAAD,CAA5B,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACC,MAAV,CADvC;AAED,KAHM,MAGA,IAAIZ,YAAY,KAAK,oBAArB,EAA2C;AAChD,UAAIE,WAAW,CAACW,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BR,QAAAA,SAAS;AACV,OAFD,MAEO;AACLR,QAAAA,mCAAmC,CAACK,WAAD,CAAnC,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACC,MAAV,CADvC;AAED;AACF;AACF,GAfD,MAeO,IAAIZ,YAAY,KAAK,mBAArB,EAA0C;AAC/CL,IAAAA,kCAAkC,CAACO,WAAD,CAAlC,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACG,KAAV,CADvC;AAED,GAHM,MAGA,IAAId,YAAY,KAAK,YAArB,EAAmC;AACxCJ,IAAAA,2BAA2B,CAACM,WAAD,CAA3B,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACG,KAAV,CADvC;AAED,GAHM,MAGA,IAAId,YAAY,KAAK,oBAArB,EAA2C;AAChD,QAAIE,WAAW,CAACW,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BR,MAAAA,SAAS;AACV,KAFD,MAEO;AACLX,MAAAA,kCAAkC,CAACQ,WAAD,CAAlC,CACGQ,IADH,CACSC,QAAD,IAAcV,iBAAiB,CAACU,QAAQ,CAACG,KAAV,CADvC;AAED;AACF;AAEF,CA/BH;;AAiCE,MAAMC,aAAa,GAAG,MAAM;AACxBxB,EAAAA,SAAS,CACLgB,UADK,EAER,CAACJ,YAAD,CAFQ,CAAT;AAGH,CAJD;;AAMA,eAAeY,aAAf","sourcesContent":["import {useEffect  ,useContext} from 'react';\nimport history from '../history/history';\nimport {\n  getCurrenceRecipesFoodsFirstLetter,\n  getCurrenceRecipesFoodsIngredients,\n  getCurrenceRecipesFoodsName,\n} from '../services/foodAPI';\nimport {\n  getCurrenceRecipesDrinksFirstLetter,\n  getCurrenceRecipesDrinksIngredients,\n  getCurrenceRecipesDrinksName,\n} from '../services/drinkAPI';\n\nconst {  filterSearch , setRecipesFilters ,searchInput , getSearchBtn } = useContext(RecipesContext);\n\nconst showAlert = () => {\n    alert('Sua busca deve conter somente 1 (um) caracter')\n  }\n\nconst requestApi = () => {\n    if (history.location.pathname === '/bebidas') {\n      if (filterSearch === 'ingredients-input') {\n        getCurrenceRecipesDrinksIngredients(searchInput)\n          .then((response) => setRecipesFilters(response.drinks));\n      } else if (filterSearch === 'name-input') {\n        getCurrenceRecipesDrinksName(searchInput)\n          .then((response) => setRecipesFilters(response.drinks));\n      } else if (filterSearch === 'first-letter-input') {\n        if (searchInput.length > 1) {\n          showAlert()\n        } else {\n          getCurrenceRecipesDrinksFirstLetter(searchInput)\n            .then((response) => setRecipesFilters(response.drinks));\n        }\n      }\n    } else if (filterSearch === 'ingredients-input') {\n      getCurrenceRecipesFoodsIngredients(searchInput)\n        .then((response) => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'name-input') {\n      getCurrenceRecipesFoodsName(searchInput)\n        .then((response) => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'first-letter-input') {\n      if (searchInput.length > 1) {\n        showAlert()\n      } else {\n        getCurrenceRecipesFoodsFirstLetter(searchInput)\n          .then((response) => setRecipesFilters(response.meals));\n      }\n    }\n\n  }\n\n  const useRequestApi = () => {\n      useEffect(\n          requestApi\n      ,[getSearchBtn])\n  }\n\n  export default useRequestApi;"]},"metadata":{},"sourceType":"module"}