{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Trybe/Projetos-trybe/sd-07-project-recipes-app/src/context/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipesContext from './RecipesContext';\nimport { getCurrenceRecipesFoodsFirstLetter, getCurrenceRecipesFoodsIngredients, getCurrenceRecipesFoodsName } from '../services/foodAPI';\n\nfunction Provider({\n  children\n}) {\n  // const retrieveEmail = () => {\n  // const storageEmail = JSON.parse(localStorage.getItem('user'));\n  // return storageEmail === undefined ? '' : storageEmail.email;\n  // };\n  const [userEmail, setUserEmail] = useState('');\n  const [searchRender, setSearchRender] = useState(false);\n  const [filterSearch, setFilterSearch] = useState('');\n  const [recipesFilters, setRecipesFilters] = useState([]);\n  const [searchInput, setSearchInput] = useState('');\n  const [getSearchBtn, setSearchBtn] = useState(false);\n  useEffect(() => {\n    if (filterSearch === 'ingredients-input') {\n      getCurrenceRecipesFoodsIngredients(searchInput).then(response => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'name-input') {\n      getCurrenceRecipesFoodsName(searchInput).then(response => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'first-letter-input') {\n      getCurrenceRecipesFoodsFirstLetter(searchInput).then(response => setRecipesFilters(response.meals));\n    }\n  }, [getSearchBtn]);\n  console.log(recipesFilters);\n  const context = {\n    filterSearch,\n    userEmail,\n    searchRender,\n    searchInput,\n    getSearchBtn,\n    setSearchBtn,\n    setSearchInput,\n    setFilterSearch,\n    setUserEmail,\n    setSearchRender\n  };\n  return /*#__PURE__*/React.createElement(RecipesContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/home/guilherme/Trybe/Projetos-trybe/sd-07-project-recipes-app/src/context/Provider.js"],"names":["React","useState","useEffect","PropTypes","RecipesContext","getCurrenceRecipesFoodsFirstLetter","getCurrenceRecipesFoodsIngredients","getCurrenceRecipesFoodsName","Provider","children","userEmail","setUserEmail","searchRender","setSearchRender","filterSearch","setFilterSearch","recipesFilters","setRecipesFilters","searchInput","setSearchInput","getSearchBtn","setSearchBtn","then","response","meals","console","log","context","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAAQC,kCAAR,EAA6CC,kCAA7C,EAAiFC,2BAAjF,QAAmH,qBAAnH;;AAGA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B;AACA;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAEa,YAAF,EAAiBC,eAAjB,IAAqCd,QAAQ,CAAC,EAAD,CAAnD;AACA,QAAM,CAAEe,cAAF,EAAmBC,iBAAnB,IAAyChB,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAAEiB,WAAF,EAAgBC,cAAhB,IAAmClB,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAAEmB,YAAF,EAAiBC,YAAjB,IAAkCpB,QAAQ,CAAC,KAAD,CAAhD;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGY,YAAY,KAAM,mBAArB,EAA0C;AACxCR,MAAAA,kCAAkC,CAACY,WAAD,CAAlC,CACCI,IADD,CACOC,QAAD,IAAcN,iBAAiB,CAACM,QAAQ,CAACC,KAAV,CADrC;AAED,KAHD,MAGO,IAAGV,YAAY,KAAK,YAApB,EAAkC;AACvCP,MAAAA,2BAA2B,CAACW,WAAD,CAA3B,CACCI,IADD,CACOC,QAAD,IAAcN,iBAAiB,CAACM,QAAQ,CAACC,KAAV,CADrC;AAED,KAHM,MAGA,IAAIV,YAAY,KAAK,oBAArB,EAA4C;AACjDT,MAAAA,kCAAkC,CAACa,WAAD,CAAlC,CACCI,IADD,CACOC,QAAD,IAAcN,iBAAiB,CAACM,QAAQ,CAACC,KAAV,CADrC;AAED;AACF,GAXQ,EAWP,CAACJ,YAAD,CAXO,CAAT;AAYDK,EAAAA,OAAO,CAACC,GAAR,CAAYV,cAAZ;AACC,QAAMW,OAAO,GAAG;AACdb,IAAAA,YADc;AAEdJ,IAAAA,SAFc;AAGdE,IAAAA,YAHc;AAIdM,IAAAA,WAJc;AAKdE,IAAAA,YALc;AAMdC,IAAAA,YANc;AAOdF,IAAAA,cAPc;AAQdJ,IAAAA,eARc;AASdJ,IAAAA,YATc;AAUdE,IAAAA;AAVc,GAAhB;AAaA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGc,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QADH,CADF;AAKD;;AAEDD,QAAQ,CAACoB,SAAT,GAAqB;AACnBnB,EAAAA,QAAQ,EAAEN,SAAS,CAAC0B,IAAV,CAAeC;AADN,CAArB;AAIA,eAAetB,QAAf","sourcesContent":["import React, { useState , useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipesContext from './RecipesContext';\nimport {getCurrenceRecipesFoodsFirstLetter , getCurrenceRecipesFoodsIngredients ,getCurrenceRecipesFoodsName} from '../services/foodAPI'\n\n\nfunction Provider({ children }) {\n  // const retrieveEmail = () => {\n  // const storageEmail = JSON.parse(localStorage.getItem('user'));\n  // return storageEmail === undefined ? '' : storageEmail.email;\n  // };\n\n  const [userEmail, setUserEmail] = useState('');\n  const [searchRender, setSearchRender] = useState(false)\n  const [ filterSearch , setFilterSearch ] = useState('');\n  const [ recipesFilters , setRecipesFilters ] = useState([]);\n  const [ searchInput  ,setSearchInput ] = useState('')\n  const [ getSearchBtn , setSearchBtn ] = useState(false)\n  \n  \n\n  useEffect(() => {\n    if(filterSearch  === 'ingredients-input') {\n      getCurrenceRecipesFoodsIngredients(searchInput)\n      .then((response) => setRecipesFilters(response.meals) ) \n    } else if(filterSearch === 'name-input') {\n      getCurrenceRecipesFoodsName(searchInput)\n      .then((response) => setRecipesFilters(response.meals))\n    } else if (filterSearch === 'first-letter-input' ) {\n      getCurrenceRecipesFoodsFirstLetter(searchInput)\n      .then((response) => setRecipesFilters(response.meals))\n    }\n  },[getSearchBtn])\n console.log(recipesFilters)\n  const context = {\n    filterSearch,\n    userEmail,\n    searchRender,\n    searchInput,\n    getSearchBtn,\n    setSearchBtn,\n    setSearchInput,\n    setFilterSearch,\n    setUserEmail,\n    setSearchRender,\n  };\n\n  return (\n    <RecipesContext.Provider value={ context }>\n      {children}\n    </RecipesContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}