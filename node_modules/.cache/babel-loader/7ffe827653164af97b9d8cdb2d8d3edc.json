{"ast":null,"code":"import { useEffect } from 'react';\nimport history from '../history/history';\nimport { getCurrenceRecipesFoodsFirstLetter, getCurrenceRecipesFoodsIngredients, getCurrenceRecipesFoodsName } from '../services/foodAPI';\nimport { getCurrenceRecipesDrinksFirstLetter, getCurrenceRecipesDrinksIngredients, getCurrenceRecipesDrinksName } from '../services/drinkAPI';\n\nconst showAlert = () => {\n  alert('Sua busca deve conter somente 1 (um) caracter');\n};\n\nconst requestApi = (filterSearch, setRecipesFilters, searchInput) => {\n  if (history.location.pathname === '/bebidas') {\n    if (filterSearch === 'ingredients-input') {\n      getCurrenceRecipesDrinksIngredients(searchInput).then(response => setRecipesFilters(response.drinks));\n    } else if (filterSearch === 'name-input') {\n      getCurrenceRecipesDrinksName(searchInput).then(response => setRecipesFilters(response.drinks));\n    } else if (filterSearch === 'first-letter-input') {\n      if (searchInput.length > 1) {\n        showAlert();\n      } else {\n        getCurrenceRecipesDrinksFirstLetter(searchInput).then(response => setRecipesFilters(response.drinks));\n      }\n    }\n  } else if (filterSearch === 'ingredients-input') {\n    getCurrenceRecipesFoodsIngredients(searchInput).then(response => setRecipesFilters(response.meals));\n  } else if (filterSearch === 'name-input') {\n    getCurrenceRecipesFoodsName(searchInput).then(response => setRecipesFilters(response.meals));\n  } else if (filterSearch === 'first-letter-input') {\n    if (searchInput.length > 1) {\n      showAlert();\n    } else {\n      getCurrenceRecipesFoodsFirstLetter(searchInput).then(response => setRecipesFilters(response.meals));\n    }\n  }\n};\n\nconst useRequestApi = (filterSearch, setRecipesFilters, searchInput, setSearchBtn) => {\n  useEffect(requestApi(filterSearch, setRecipesFilters, searchInput), [setSearchBtn]);\n};\n\nexport default useRequestApi;","map":{"version":3,"sources":["/home/guilherme/Trybe/Projetos-trybe/sd-07-project-recipes-app/src/hooks/useApi.js"],"names":["useEffect","history","getCurrenceRecipesFoodsFirstLetter","getCurrenceRecipesFoodsIngredients","getCurrenceRecipesFoodsName","getCurrenceRecipesDrinksFirstLetter","getCurrenceRecipesDrinksIngredients","getCurrenceRecipesDrinksName","showAlert","alert","requestApi","filterSearch","setRecipesFilters","searchInput","location","pathname","then","response","drinks","length","meals","useRequestApi","setSearchBtn"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,SACIC,kCADJ,EAEIC,kCAFJ,EAGIC,2BAHJ,QAIO,qBAJP;AAKA,SACIC,mCADJ,EAEIC,mCAFJ,EAGIC,4BAHJ,QAIO,sBAJP;;AAUA,MAAMC,SAAS,GAAG,MAAM;AACpBC,EAAAA,KAAK,CAAC,+CAAD,CAAL;AACH,CAFD;;AAMA,MAAMC,UAAU,GAAG,CAACC,YAAD,EAAeC,iBAAf,EAAkCC,WAAlC,KAAkD;AACjE,MAAIZ,OAAO,CAACa,QAAR,CAAiBC,QAAjB,KAA8B,UAAlC,EAA8C;AAC1C,QAAIJ,YAAY,KAAK,mBAArB,EAA0C;AACtCL,MAAAA,mCAAmC,CAACO,WAAD,CAAnC,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACC,MAAV,CADzC;AAEH,KAHD,MAGO,IAAIP,YAAY,KAAK,YAArB,EAAmC;AACtCJ,MAAAA,4BAA4B,CAACM,WAAD,CAA5B,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACC,MAAV,CADzC;AAEH,KAHM,MAGA,IAAIP,YAAY,KAAK,oBAArB,EAA2C;AAC9C,UAAIE,WAAW,CAACM,MAAZ,GAAqB,CAAzB,EAA4B;AACxBX,QAAAA,SAAS;AACZ,OAFD,MAEO;AACHH,QAAAA,mCAAmC,CAACQ,WAAD,CAAnC,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACC,MAAV,CADzC;AAEH;AACJ;AACJ,GAfD,MAeO,IAAIP,YAAY,KAAK,mBAArB,EAA0C;AAC7CR,IAAAA,kCAAkC,CAACU,WAAD,CAAlC,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACG,KAAV,CADzC;AAEH,GAHM,MAGA,IAAIT,YAAY,KAAK,YAArB,EAAmC;AACtCP,IAAAA,2BAA2B,CAACS,WAAD,CAA3B,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACG,KAAV,CADzC;AAEH,GAHM,MAGA,IAAIT,YAAY,KAAK,oBAArB,EAA2C;AAC9C,QAAIE,WAAW,CAACM,MAAZ,GAAqB,CAAzB,EAA4B;AACxBX,MAAAA,SAAS;AACZ,KAFD,MAEO;AACHN,MAAAA,kCAAkC,CAACW,WAAD,CAAlC,CACKG,IADL,CACWC,QAAD,IAAcL,iBAAiB,CAACK,QAAQ,CAACG,KAAV,CADzC;AAEH;AACJ;AACJ,CA9BD;;AA+BI,MAAMC,aAAa,GAAG,CAACV,YAAD,EAAeC,iBAAf,EAAkCC,WAAlC,EAA+CS,YAA/C,KAAgE;AAClFtB,EAAAA,SAAS,CACLU,UAAU,CAACC,YAAD,EAAeC,iBAAf,EAAkCC,WAAlC,CADL,EAER,CAACS,YAAD,CAFQ,CAAT;AAGH,CAJD;;AAUA,eAAeD,aAAf","sourcesContent":["import { useEffect } from 'react';\nimport history from '../history/history';\n\nimport {\n    getCurrenceRecipesFoodsFirstLetter,\n    getCurrenceRecipesFoodsIngredients,\n    getCurrenceRecipesFoodsName,\n} from '../services/foodAPI';\nimport {\n    getCurrenceRecipesDrinksFirstLetter,\n    getCurrenceRecipesDrinksIngredients,\n    getCurrenceRecipesDrinksName,\n} from '../services/drinkAPI';\n\n\n\n\n\nconst showAlert = () => {\n    alert('Sua busca deve conter somente 1 (um) caracter')\n}\n\n\n\nconst requestApi = (filterSearch, setRecipesFilters, searchInput) => {\n    if (history.location.pathname === '/bebidas') {\n        if (filterSearch === 'ingredients-input') {\n            getCurrenceRecipesDrinksIngredients(searchInput)\n                .then((response) => setRecipesFilters(response.drinks));\n        } else if (filterSearch === 'name-input') {\n            getCurrenceRecipesDrinksName(searchInput)\n                .then((response) => setRecipesFilters(response.drinks));\n        } else if (filterSearch === 'first-letter-input') {\n            if (searchInput.length > 1) {\n                showAlert()\n            } else {\n                getCurrenceRecipesDrinksFirstLetter(searchInput)\n                    .then((response) => setRecipesFilters(response.drinks));\n            }\n        }\n    } else if (filterSearch === 'ingredients-input') {\n        getCurrenceRecipesFoodsIngredients(searchInput)\n            .then((response) => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'name-input') {\n        getCurrenceRecipesFoodsName(searchInput)\n            .then((response) => setRecipesFilters(response.meals));\n    } else if (filterSearch === 'first-letter-input') {\n        if (searchInput.length > 1) {\n            showAlert()\n        } else {\n            getCurrenceRecipesFoodsFirstLetter(searchInput)\n                .then((response) => setRecipesFilters(response.meals));\n        }\n    }\n}\n    const useRequestApi = (filterSearch, setRecipesFilters, searchInput, setSearchBtn) => {\n        useEffect(\n            requestApi(filterSearch, setRecipesFilters, searchInput)\n        ,[setSearchBtn])\n    }\n\n\n\n\n\n    export default useRequestApi;"]},"metadata":{},"sourceType":"module"}